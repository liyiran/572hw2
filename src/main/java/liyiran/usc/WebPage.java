/*
 * $Id$
 *
 * Copyright (c) 2003, 2004 WorldTicket A/S
 * All rights reserved.
 */
package liyiran.usc;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

import java.util.Map;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

/**
 * @author Yiran Li / 2M business applications a|s
 * @version $Revision$ $Date$
 */
@Entity
@BeanDefinition
public class WebPage implements Bean {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer id;
    @PropertyDefinition
    private String url;
    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code WebPage}.
     * @return the meta-bean, not null
     */
    public static WebPage.Meta meta() {
        return WebPage.Meta.INSTANCE;
    }

    static {
        MetaBean.register(WebPage.Meta.INSTANCE);
    }

    @Override
    public WebPage.Meta metaBean() {
        return WebPage.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the url.
     * @return the value of the property
     */
    public String getUrl() {
        return url;
    }

    /**
     * Sets the url.
     * @param url  the new value of the property
     */
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Gets the the {@code url} property.
     * @return the property, not null
     */
    public final Property<String> url() {
        return metaBean().url().createProperty(this);
    }

    //-----------------------------------------------------------------------
    @Override
    public WebPage clone() {
        return JodaBeanUtils.cloneAlways(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            WebPage other = (WebPage) obj;
            return JodaBeanUtils.equal(getUrl(), other.getUrl());
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(getUrl());
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(64);
        buf.append("WebPage{");
        int len = buf.length();
        toString(buf);
        if (buf.length() > len) {
            buf.setLength(buf.length() - 2);
        }
        buf.append('}');
        return buf.toString();
    }

    protected void toString(StringBuilder buf) {
        buf.append("url").append('=').append(JodaBeanUtils.toString(getUrl())).append(',').append(' ');
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code WebPage}.
     */
    public static class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code url} property.
         */
        private final MetaProperty<String> url = DirectMetaProperty.ofReadWrite(
                this, "url", WebPage.class, String.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "url");

        /**
         * Restricted constructor.
         */
        protected Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case 116079:  // url
                    return url;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public BeanBuilder<? extends WebPage> builder() {
            return new DirectBeanBuilder<>(new WebPage());
        }

        @Override
        public Class<? extends WebPage> beanType() {
            return WebPage.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code url} property.
         * @return the meta-property, not null
         */
        public final MetaProperty<String> url() {
            return url;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 116079:  // url
                    return ((WebPage) bean).getUrl();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            switch (propertyName.hashCode()) {
                case 116079:  // url
                    ((WebPage) bean).setUrl((String) newValue);
                    return;
            }
            super.propertySet(bean, propertyName, newValue, quiet);
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
